using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.FlowAnalysis;
using Microsoft.CodeAnalysis.Text;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace SourceGenerator
{
    [Generator]
    public class MonkeyItemGenerator : ISourceGenerator
    {
        private static readonly DiagnosticDescriptor InvalidXmlWarning = new DiagnosticDescriptor(id: "MYXMLGEN001",
                                                                                          title: "Couldn't parse XML file",
                                                                                          messageFormat: "Couldn't parse XML file '{0}'",
                                                                                          category: "MyXmlGenerator",
                                                                                          DiagnosticSeverity.Error,
                                                                                          isEnabledByDefault: true);

        public void Execute(GeneratorExecutionContext context)
        {

            var monkeyTextFile = context.AdditionalFiles.FirstOrDefault(at => at.Path.EndsWith("Day_11.txt"));
            if (monkeyTextFile == null)
            {
                context.ReportDiagnostic(Diagnostic.Create(InvalidXmlWarning, Location.None, "not found"));
                return;
            }

            var input = new List<string>();
            foreach (var line in monkeyTextFile.GetText(context.CancellationToken)!.Lines)
            {
                input.Add(line.ToString());
            }
            var monkeyCount = (input.Count + 1) / 7;
            var roundCode = Transform(input.ToArray());

            // Add the source code to the compilation
            context.AddSource($"MonkeyItem.g.cs", $$"""
                // <auto-generated/>
                using System;

                namespace AoC_2022.Days;

                public abstract class MonkeyItem
                {
                    public int CurrentMonkey { get; set; }
                    public long WorryLevel { get; set; }
                    public int[] Inspections  { get; } = new int[{{ monkeyCount }}];

                    protected abstract long Simplify(long x);

                    public void PlayRounds(int rounds)
                    {
                        for (int i = 0; i < rounds; i++)
                            PlayRound(CurrentMonkey);
                    }

                    private void PlayRound(int newMonkey)
                    {
                        CurrentMonkey = newMonkey;
                        Inspections[CurrentMonkey]++;
                        switch (CurrentMonkey)
                        { {{ roundCode }}
                        }
                    }
                }
                """);
        }

        private string Transform(string[] input)
        {
            var monkeys = new List<MonkeyInfo>();
            for (int i = 0; i < input.Length; i++)
            {
                if (input[i].StartsWith("Monkey"))
                    monkeys.Add(ParseMonkey(new ArraySegment<string>(input, i, 6)));
            }

            var code = new StringBuilder(Environment.NewLine);
            foreach (var monkey in monkeys)
            {
                var trueCode = JumpCode(monkey.Idx, monkey.TrueMonkey);
                var falseCode = JumpCode(monkey.Idx, monkey.FalseMonkey);

                _ = code.AppendLine($"""
                    case { monkey.Idx }:
                        WorryLevel = Simplify({ monkey.Op.Replace("old", "WorryLevel") });
                        if (WorryLevel % { monkey.Test } == 0)
                            { trueCode };
                        else
                            { falseCode };
                    break;
                    """);
            }
            return code.ToString();

            static string JumpCode(int idx, int target) => target < idx
                    ? $"CurrentMonkey = {target}"
                    : $"PlayRound({target})";
        }

        private MonkeyInfo ParseMonkey(IList<string> block)
        {
            var monkeyIndex = GetInt(0);
            var op = Regex.Match(block[2], @"= (.+)").Groups[1].Value;
            var test = GetNumber(3);
            var trueMonkey = GetInt(4);
            var falseMonkey = GetInt(5);
            return new MonkeyInfo(monkeyIndex, op, test, trueMonkey, falseMonkey);

            string GetNumber(int lineIdx) => Regex.Match(block[lineIdx], @"\d+").Value;
            int GetInt(int lineIdx) => int.Parse(GetNumber(lineIdx));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }

        private record MonkeyInfo(int Idx, string Op, string Test, int TrueMonkey, int FalseMonkey);
    }
}

namespace System.Runtime.CompilerServices
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal static class IsExternalInit { }
}